// importa o db que você exportou no seu arquivo de config import { db } from "./srcfirebaseConfig.js"; // importa funções do Firestore via CDN (v9+ modular) import { collection, addDoc, getDocs, query, where, doc, deleteDoc } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-firestore.js"; // variáveis de sessão let loggedUser = null; let userObj = null; /* ========================== FUNÇÕES DE AUTENTICAÇÃO ========================== */ async function register() { const username = document.getElementById("regUsername").value.trim(); const password = document.getElementById("regPassword").value.trim(); const question = document.getElementById("regQuestion") ? document.getElementById("regQuestion").value.trim() : ""; const answer = document.getElementById("regAnswer") ? document.getElementById("regAnswer").value.trim() : ""; if (!username || !password) return alert("Preencha todos os campos!"); try { // checa existência de usuário const q = query(collection(db, "usuarios"), where("usuario", "==", username)); const snapshot = await getDocs(q); if (!snapshot.empty) return alert("Usuário já existe!"); // cria usuário (ATENÇÃO: senha em texto puro - só para teste) await addDoc(collection(db, "usuarios"), { usuario: username, senha: password, securityQuestion: question || null, securityAnswer: answer || null, tipoUsuario: "usuario", createdAt: new Date().toISOString() }); alert("Usuário registrado com sucesso! Faça login."); // limpa campos document.getElementById("regUsername").value = ""; document.getElementById("regPassword").value = ""; if (document.getElementById("regQuestion")) document.getElementById("regQuestion").value = ""; if (document.getElementById("regAnswer")) document.getElementById("regAnswer").value = ""; showLogin(); } catch (e) { console.error("Erro ao registrar:", e); alert("Erro ao registrar usuário. Veja o console para detalhes."); } } async function login() { const username = document.getElementById("loginUsername").value.trim(); const password = document.getElementById("loginPassword").value.trim(); if (!username || !password) return alert("Preencha usuário e senha!"); try { const q = query( collection(db, "usuarios"), where("usuario", "==", username), where("senha", "==", password) ); const snapshot = await getDocs(q); if (snapshot.empty) return alert("Usuário ou senha incorretos!"); // pega o primeiro resultado (assumindo username único) userObj = snapshot.docs[0].data(); loggedUser = userObj.usuario; // persiste sessão localmente localStorage.setItem("usuarioLogado", JSON.stringify(userObj)); alert("Login realizado com sucesso!"); showMain(); } catch (e) { console.error("Erro no login:", e); alert("Erro ao efetuar login. Veja o console."); } } function logoff() { loggedUser = null; userObj = null; localStorage.removeItem("usuarioLogado"); showLogin(); } /* ========================== AGENDAMENTOS (CRUD) ========================== */ async function loadReservations() { try { const snapshot = await getDocs(collection(db, "agendamentos")); return snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() })); } catch (e) { console.error("Erro ao carregar reservas:", e); return []; } } async function createReservation() { const titulo = document.getElementById("titulo").value.trim(); const data = document.getElementById("data").value; const inicio = document.getElementById("horaInicio").value; const fim = document.getElementById("horaFim").value; if (!titulo || !data || !inicio || !fim) return alert("Preencha todos os campos!"); try { await addDoc(collection(db, "agendamentos"), { titulo, data, horarioInicio: inicio, horarioFim: fim, organizador: loggedUser || "anônimo", createdAt: new Date().toISOString() }); // limpa inputs (opcional) document.getElementById("titulo").value = ""; document.getElementById("data").value = ""; document.getElementById("horaInicio").selectedIndex = 0; document.getElementById("horaFim").selectedIndex = 0; await renderTable(); } catch (e) { console.error("Erro ao criar agendamento:", e); alert("Erro ao criar agendamento. Veja o console."); } } async function excluir(id) { try { await deleteDoc(doc(db, "agendamentos", id)); await renderTable(); } catch (e) { console.error("Erro ao excluir agendamento:", e); alert("Erro ao excluir agendamento. Veja o console."); } } async function renderTable() { const tableBody = document.querySelector("#meetingTable tbody"); if (!tableBody) return; tableBody.innerHTML = ""; const reservas = await loadReservations(); // ordena por data/hora se quiser (opcional) reservas.sort((a, b) => { if (a.data === b.data) return (a.horarioInicio || "").localeCompare(b.horarioInicio || ""); return (a.data || "").localeCompare(b.data || ""); }); reservas.forEach(r => { const row = document.createElement("tr"); row.innerHTML = <td>${r.titulo || ""}</td> <td>${r.organizador || ""}</td> <td>${r.data || ""}</td> <td>${r.horarioInicio || ""}</td> <td>${r.horarioFim || ""}</td> <td> <button class="action-btn delete-btn" onclick="excluir('${r.id}')">Excluir</button> </td> ; tableBody.appendChild(row); }); } /* ========================== AUXILIARES / UI ========================== */ function initTimeSelectors() { const start = document.getElementById("horaInicio"); const end = document.getElementById("horaFim"); if (!start || !end) return; // limpa (caso já tenha algo) start.innerHTML = ""; end.innerHTML = ""; for (let h = 8; h <= 18; h++) { const hr = h.toString().padStart(2, "0"); start.innerHTML += <option value="${hr}:00">${hr}:00</option>; start.innerHTML += <option value="${hr}:30">${hr}:30</option>; end.innerHTML += <option value="${hr}:00">${hr}:00</option>; end.innerHTML += <option value="${hr}:30">${hr}:30</option>; } } function showLogin() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); const ms = document.getElementById("mainSection"); const lb = document.getElementById("logoffBtn"); if (ls) ls.style.display = "block"; if (rs) rs.style.display = "none"; if (ms) ms.style.display = "none"; if (lb) lb.style.display = "none"; const status = document.getElementById("statusBar"); if (status) status.textContent = "Não autenticado"; } function showRegister() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); if (ls) ls.style.display = "none"; if (rs) rs.style.display = "block"; } async function showMain() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); const ms = document.getElementById("mainSection"); const lb = document.getElementById("logoffBtn"); if (ls) ls.style.display = "none"; if (rs) rs.style.display = "none"; if (ms) ms.style.display = "block"; if (lb) lb.style.display = "inline-block"; const status = document.getElementById("statusBar"); if (status) status.textContent = Logado: ${loggedUser || "anônimo"}; await renderTable(); } /* ========================== INICIALIZAÇÃO DA PÁGINA ========================== */ document.addEventListener("DOMContentLoaded", async () => { // prepara seletores de horário initTimeSelectors(); // mostra tela de login por padrão ou restaura sessão const saved = localStorage.getItem("usuarioLogado"); if (saved) { try { userObj = JSON.parse(saved); loggedUser = userObj.usuario; await showMain(); } catch { showLogin(); } } else { showLogin(); } // conecta botões do HTML (se existirem) const bookBtn = document.getElementById("bookBtn"); if (bookBtn) bookBtn.addEventListener("click", createReservation); const logoffBtn = document.getElementById("logoffBtn"); if (logoffBtn) logoffBtn.addEventListener("click", logoff); }); /* ========================== EXPÕE FUNÇÕES PARA O HTML ========================== */ // algumas funções são chamadas a partir de atributos onclick do HTML, // então precisamos deixá-las acessíveis via window window.login = login; window.register = register; window.showLogin = showLogin; window.showRegister = showRegister; window.logoff = logoff; window.createReservation = createReservation; window.excluir = excluir;// importa o db que você exportou no seu arquivo de config import { db } from "./srcfirebaseConfig.js"; // importa funções do Firestore via CDN (v9+ modular) import { collection, addDoc, getDocs, query, where, doc, deleteDoc } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-firestore.js"; // variáveis de sessão let loggedUser = null; let userObj = null; /* ========================== FUNÇÕES DE AUTENTICAÇÃO ========================== */ async function register() { const username = document.getElementById("regUsername").value.trim(); const password = document.getElementById("regPassword").value.trim(); const question = document.getElementById("regQuestion") ? document.getElementById("regQuestion").value.trim() : ""; const answer = document.getElementById("regAnswer") ? document.getElementById("regAnswer").value.trim() : ""; if (!username || !password) return alert("Preencha todos os campos!"); try { // checa existência de usuário const q = query(collection(db, "usuarios"), where("usuario", "==", username)); const snapshot = await getDocs(q); if (!snapshot.empty) return alert("Usuário já existe!"); // cria usuário (ATENÇÃO: senha em texto puro - só para teste) await addDoc(collection(db, "usuarios"), { usuario: username, senha: password, securityQuestion: question || null, securityAnswer: answer || null, tipoUsuario: "usuario", createdAt: new Date().toISOString() }); alert("Usuário registrado com sucesso! Faça login."); // limpa campos document.getElementById("regUsername").value = ""; document.getElementById("regPassword").value = ""; if (document.getElementById("regQuestion")) document.getElementById("regQuestion").value = ""; if (document.getElementById("regAnswer")) document.getElementById("regAnswer").value = ""; showLogin(); } catch (e) { console.error("Erro ao registrar:", e); alert("Erro ao registrar usuário. Veja o console para detalhes."); } } async function login() { const username = document.getElementById("loginUsername").value.trim(); const password = document.getElementById("loginPassword").value.trim(); if (!username || !password) return alert("Preencha usuário e senha!"); try { const q = query( collection(db, "usuarios"), where("usuario", "==", username), where("senha", "==", password) ); const snapshot = await getDocs(q); if (snapshot.empty) return alert("Usuário ou senha incorretos!"); // pega o primeiro resultado (assumindo username único) userObj = snapshot.docs[0].data(); loggedUser = userObj.usuario; // persiste sessão localmente localStorage.setItem("usuarioLogado", JSON.stringify(userObj)); alert("Login realizado com sucesso!"); showMain(); } catch (e) { console.error("Erro no login:", e); alert("Erro ao efetuar login. Veja o console."); } } function logoff() { loggedUser = null; userObj = null; localStorage.removeItem("usuarioLogado"); showLogin(); } /* ========================== AGENDAMENTOS (CRUD) ========================== */ async function loadReservations() { try { const snapshot = await getDocs(collection(db, "agendamentos")); return snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() })); } catch (e) { console.error("Erro ao carregar reservas:", e); return []; } } async function createReservation() { const titulo = document.getElementById("titulo").value.trim(); const data = document.getElementById("data").value; const inicio = document.getElementById("horaInicio").value; const fim = document.getElementById("horaFim").value; if (!titulo || !data || !inicio || !fim) return alert("Preencha todos os campos!"); try { await addDoc(collection(db, "agendamentos"), { titulo, data, horarioInicio: inicio, horarioFim: fim, organizador: loggedUser || "anônimo", createdAt: new Date().toISOString() }); // limpa inputs (opcional) document.getElementById("titulo").value = ""; document.getElementById("data").value = ""; document.getElementById("horaInicio").selectedIndex = 0; document.getElementById("horaFim").selectedIndex = 0; await renderTable(); } catch (e) { console.error("Erro ao criar agendamento:", e); alert("Erro ao criar agendamento. Veja o console."); } } async function excluir(id) { try { await deleteDoc(doc(db, "agendamentos", id)); await renderTable(); } catch (e) { console.error("Erro ao excluir agendamento:", e); alert("Erro ao excluir agendamento. Veja o console."); } } async function renderTable() { const tableBody = document.querySelector("#meetingTable tbody"); if (!tableBody) return; tableBody.innerHTML = ""; const reservas = await loadReservations(); // ordena por data/hora se quiser (opcional) reservas.sort((a, b) => { if (a.data === b.data) return (a.horarioInicio || "").localeCompare(b.horarioInicio || ""); return (a.data || "").localeCompare(b.data || ""); }); reservas.forEach(r => { const row = document.createElement("tr"); row.innerHTML = <td>${r.titulo || ""}</td> <td>${r.organizador || ""}</td> <td>${r.data || ""}</td> <td>${r.horarioInicio || ""}</td> <td>${r.horarioFim || ""}</td> <td> <button class="action-btn delete-btn" onclick="excluir('${r.id}')">Excluir</button> </td> ; tableBody.appendChild(row); }); } /* ========================== AUXILIARES / UI ========================== */ function initTimeSelectors() { const start = document.getElementById("horaInicio"); const end = document.getElementById("horaFim"); if (!start || !end) return; // limpa (caso já tenha algo) start.innerHTML = ""; end.innerHTML = ""; for (let h = 8; h <= 18; h++) { const hr = h.toString().padStart(2, "0"); start.innerHTML += <option value="${hr}:00">${hr}:00</option>; start.innerHTML += <option value="${hr}:30">${hr}:30</option>; end.innerHTML += <option value="${hr}:00">${hr}:00</option>; end.innerHTML += <option value="${hr}:30">${hr}:30</option>; } } function showLogin() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); const ms = document.getElementById("mainSection"); const lb = document.getElementById("logoffBtn"); if (ls) ls.style.display = "block"; if (rs) rs.style.display = "none"; if (ms) ms.style.display = "none"; if (lb) lb.style.display = "none"; const status = document.getElementById("statusBar"); if (status) status.textContent = "Não autenticado"; } function showRegister() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); if (ls) ls.style.display = "none"; if (rs) rs.style.display = "block"; } async function showMain() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); const ms = document.getElementById("mainSection"); const lb = document.getElementById("logoffBtn"); if (ls) ls.style.display = "none"; if (rs) rs.style.display = "none"; if (ms) ms.style.display = "block"; if (lb) lb.style.display = "inline-block"; const status = document.getElementById("statusBar"); if (status) status.textContent = Logado: ${loggedUser || "anônimo"}; await renderTable(); } /* ========================== INICIALIZAÇÃO DA PÁGINA ========================== */ document.addEventListener("DOMContentLoaded", async () => { // prepara seletores de horário initTimeSelectors(); // mostra tela de login por padrão ou restaura sessão const saved = localStorage.getItem("usuarioLogado"); if (saved) { try { userObj = JSON.parse(saved); loggedUser = userObj.usuario; await showMain(); } catch { showLogin(); } } else { showLogin(); } // conecta botões do HTML (se existirem) const bookBtn = document.getElementById("bookBtn"); if (bookBtn) bookBtn.addEventListener("click", createReservation); const logoffBtn = document.getElementById("logoffBtn"); if (logoffBtn) logoffBtn.addEventListener("click", logoff); }); /* ========================== EXPÕE FUNÇÕES PARA O HTML ========================== */ // algumas funções são chamadas a partir de atributos onclick do HTML, // então precisamos deixá-las acessíveis via window window.login = login; window.register = register; window.showLogin = showLogin; window.showRegister = showRegister; window.logoff = logoff; window.createReservation = createReservation; window.excluir = excluir;// importa o db que você exportou no seu arquivo de config import { db } from "./srcfirebaseConfig.js"; // importa funções do Firestore via CDN (v9+ modular) import { collection, addDoc, getDocs, query, where, doc, deleteDoc } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-firestore.js"; // variáveis de sessão let loggedUser = null; let userObj = null; /* ========================== FUNÇÕES DE AUTENTICAÇÃO ========================== */ async function register() { const username = document.getElementById("regUsername").value.trim(); const password = document.getElementById("regPassword").value.trim(); const question = document.getElementById("regQuestion") ? document.getElementById("regQuestion").value.trim() : ""; const answer = document.getElementById("regAnswer") ? document.getElementById("regAnswer").value.trim() : ""; if (!username || !password) return alert("Preencha todos os campos!"); try { // checa existência de usuário const q = query(collection(db, "usuarios"), where("usuario", "==", username)); const snapshot = await getDocs(q); if (!snapshot.empty) return alert("Usuário já existe!"); // cria usuário (ATENÇÃO: senha em texto puro - só para teste) await addDoc(collection(db, "usuarios"), { usuario: username, senha: password, securityQuestion: question || null, securityAnswer: answer || null, tipoUsuario: "usuario", createdAt: new Date().toISOString() }); alert("Usuário registrado com sucesso! Faça login."); // limpa campos document.getElementById("regUsername").value = ""; document.getElementById("regPassword").value = ""; if (document.getElementById("regQuestion")) document.getElementById("regQuestion").value = ""; if (document.getElementById("regAnswer")) document.getElementById("regAnswer").value = ""; showLogin(); } catch (e) { console.error("Erro ao registrar:", e); alert("Erro ao registrar usuário. Veja o console para detalhes."); } } async function login() { const username = document.getElementById("loginUsername").value.trim(); const password = document.getElementById("loginPassword").value.trim(); if (!username || !password) return alert("Preencha usuário e senha!"); try { const q = query( collection(db, "usuarios"), where("usuario", "==", username), where("senha", "==", password) ); const snapshot = await getDocs(q); if (snapshot.empty) return alert("Usuário ou senha incorretos!"); // pega o primeiro resultado (assumindo username único) userObj = snapshot.docs[0].data(); loggedUser = userObj.usuario; // persiste sessão localmente localStorage.setItem("usuarioLogado", JSON.stringify(userObj)); alert("Login realizado com sucesso!"); showMain(); } catch (e) { console.error("Erro no login:", e); alert("Erro ao efetuar login. Veja o console."); } } function logoff() { loggedUser = null; userObj = null; localStorage.removeItem("usuarioLogado"); showLogin(); } /* ========================== AGENDAMENTOS (CRUD) ========================== */ async function loadReservations() { try { const snapshot = await getDocs(collection(db, "agendamentos")); return snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() })); } catch (e) { console.error("Erro ao carregar reservas:", e); return []; } } async function createReservation() { const titulo = document.getElementById("titulo").value.trim(); const data = document.getElementById("data").value; const inicio = document.getElementById("horaInicio").value; const fim = document.getElementById("horaFim").value; if (!titulo || !data || !inicio || !fim) return alert("Preencha todos os campos!"); try { await addDoc(collection(db, "agendamentos"), { titulo, data, horarioInicio: inicio, horarioFim: fim, organizador: loggedUser || "anônimo", createdAt: new Date().toISOString() }); // limpa inputs (opcional) document.getElementById("titulo").value = ""; document.getElementById("data").value = ""; document.getElementById("horaInicio").selectedIndex = 0; document.getElementById("horaFim").selectedIndex = 0; await renderTable(); } catch (e) { console.error("Erro ao criar agendamento:", e); alert("Erro ao criar agendamento. Veja o console."); } } async function excluir(id) { try { await deleteDoc(doc(db, "agendamentos", id)); await renderTable(); } catch (e) { console.error("Erro ao excluir agendamento:", e); alert("Erro ao excluir agendamento. Veja o console."); } } async function renderTable() { const tableBody = document.querySelector("#meetingTable tbody"); if (!tableBody) return; tableBody.innerHTML = ""; const reservas = await loadReservations(); // ordena por data/hora se quiser (opcional) reservas.sort((a, b) => { if (a.data === b.data) return (a.horarioInicio || "").localeCompare(b.horarioInicio || ""); return (a.data || "").localeCompare(b.data || ""); }); reservas.forEach(r => { const row = document.createElement("tr"); row.innerHTML = <td>${r.titulo || ""}</td> <td>${r.organizador || ""}</td> <td>${r.data || ""}</td> <td>${r.horarioInicio || ""}</td> <td>${r.horarioFim || ""}</td> <td> <button class="action-btn delete-btn" onclick="excluir('${r.id}')">Excluir</button> </td> ; tableBody.appendChild(row); }); } /* ========================== AUXILIARES / UI ========================== */ function initTimeSelectors() { const start = document.getElementById("horaInicio"); const end = document.getElementById("horaFim"); if (!start || !end) return; // limpa (caso já tenha algo) start.innerHTML = ""; end.innerHTML = ""; for (let h = 8; h <= 18; h++) { const hr = h.toString().padStart(2, "0"); start.innerHTML += <option value="${hr}:00">${hr}:00</option>; start.innerHTML += <option value="${hr}:30">${hr}:30</option>; end.innerHTML += <option value="${hr}:00">${hr}:00</option>; end.innerHTML += <option value="${hr}:30">${hr}:30</option>; } } function showLogin() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); const ms = document.getElementById("mainSection"); const lb = document.getElementById("logoffBtn"); if (ls) ls.style.display = "block"; if (rs) rs.style.display = "none"; if (ms) ms.style.display = "none"; if (lb) lb.style.display = "none"; const status = document.getElementById("statusBar"); if (status) status.textContent = "Não autenticado"; } function showRegister() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); if (ls) ls.style.display = "none"; if (rs) rs.style.display = "block"; } async function showMain() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); const ms = document.getElementById("mainSection"); const lb = document.getElementById("logoffBtn"); if (ls) ls.style.display = "none"; if (rs) rs.style.display = "none"; if (ms) ms.style.display = "block"; if (lb) lb.style.display = "inline-block"; const status = document.getElementById("statusBar"); if (status) status.textContent = Logado: ${loggedUser || "anônimo"}; await renderTable(); } /* ========================== INICIALIZAÇÃO DA PÁGINA ========================== */ document.addEventListener("DOMContentLoaded", async () => { // prepara seletores de horário initTimeSelectors(); // mostra tela de login por padrão ou restaura sessão const saved = localStorage.getItem("usuarioLogado"); if (saved) { try { userObj = JSON.parse(saved); loggedUser = userObj.usuario; await showMain(); } catch { showLogin(); } } else { showLogin(); } // conecta botões do HTML (se existirem) const bookBtn = document.getElementById("bookBtn"); if (bookBtn) bookBtn.addEventListener("click", createReservation); const logoffBtn = document.getElementById("logoffBtn"); if (logoffBtn) logoffBtn.addEventListener("click", logoff); }); /* ========================== EXPÕE FUNÇÕES PARA O HTML ========================== */ // algumas funções são chamadas a partir de atributos onclick do HTML, // então precisamos deixá-las acessíveis via window window.login = login; window.register = register; window.showLogin = showLogin; window.showRegister = showRegister; window.logoff = logoff; window.createReservation = createReservation; window.excluir = excluir;// importa o db que você exportou no seu arquivo de config import { db } from "./srcfirebaseConfig.js"; // importa funções do Firestore via CDN (v9+ modular) import { collection, addDoc, getDocs, query, where, doc, deleteDoc } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-firestore.js"; // variáveis de sessão let loggedUser = null; let userObj = null; /* ========================== FUNÇÕES DE AUTENTICAÇÃO ========================== */ async function register() { const username = document.getElementById("regUsername").value.trim(); const password = document.getElementById("regPassword").value.trim(); const question = document.getElementById("regQuestion") ? document.getElementById("regQuestion").value.trim() : ""; const answer = document.getElementById("regAnswer") ? document.getElementById("regAnswer").value.trim() : ""; if (!username || !password) return alert("Preencha todos os campos!"); try { // checa existência de usuário const q = query(collection(db, "usuarios"), where("usuario", "==", username)); const snapshot = await getDocs(q); if (!snapshot.empty) return alert("Usuário já existe!"); // cria usuário (ATENÇÃO: senha em texto puro - só para teste) await addDoc(collection(db, "usuarios"), { usuario: username, senha: password, securityQuestion: question || null, securityAnswer: answer || null, tipoUsuario: "usuario", createdAt: new Date().toISOString() }); alert("Usuário registrado com sucesso! Faça login."); // limpa campos document.getElementById("regUsername").value = ""; document.getElementById("regPassword").value = ""; if (document.getElementById("regQuestion")) document.getElementById("regQuestion").value = ""; if (document.getElementById("regAnswer")) document.getElementById("regAnswer").value = ""; showLogin(); } catch (e) { console.error("Erro ao registrar:", e); alert("Erro ao registrar usuário. Veja o console para detalhes."); } } async function login() { const username = document.getElementById("loginUsername").value.trim(); const password = document.getElementById("loginPassword").value.trim(); if (!username || !password) return alert("Preencha usuário e senha!"); try { const q = query( collection(db, "usuarios"), where("usuario", "==", username), where("senha", "==", password) ); const snapshot = await getDocs(q); if (snapshot.empty) return alert("Usuário ou senha incorretos!"); // pega o primeiro resultado (assumindo username único) userObj = snapshot.docs[0].data(); loggedUser = userObj.usuario; // persiste sessão localmente localStorage.setItem("usuarioLogado", JSON.stringify(userObj)); alert("Login realizado com sucesso!"); showMain(); } catch (e) { console.error("Erro no login:", e); alert("Erro ao efetuar login. Veja o console."); } } function logoff() { loggedUser = null; userObj = null; localStorage.removeItem("usuarioLogado"); showLogin(); } /* ========================== AGENDAMENTOS (CRUD) ========================== */ async function loadReservations() { try { const snapshot = await getDocs(collection(db, "agendamentos")); return snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() })); } catch (e) { console.error("Erro ao carregar reservas:", e); return []; } } async function createReservation() { const titulo = document.getElementById("titulo").value.trim(); const data = document.getElementById("data").value; const inicio = document.getElementById("horaInicio").value; const fim = document.getElementById("horaFim").value; if (!titulo || !data || !inicio || !fim) return alert("Preencha todos os campos!"); try { await addDoc(collection(db, "agendamentos"), { titulo, data, horarioInicio: inicio, horarioFim: fim, organizador: loggedUser || "anônimo", createdAt: new Date().toISOString() }); // limpa inputs (opcional) document.getElementById("titulo").value = ""; document.getElementById("data").value = ""; document.getElementById("horaInicio").selectedIndex = 0; document.getElementById("horaFim").selectedIndex = 0; await renderTable(); } catch (e) { console.error("Erro ao criar agendamento:", e); alert("Erro ao criar agendamento. Veja o console."); } } async function excluir(id) { try { await deleteDoc(doc(db, "agendamentos", id)); await renderTable(); } catch (e) { console.error("Erro ao excluir agendamento:", e); alert("Erro ao excluir agendamento. Veja o console."); } } async function renderTable() { const tableBody = document.querySelector("#meetingTable tbody"); if (!tableBody) return; tableBody.innerHTML = ""; const reservas = await loadReservations(); // ordena por data/hora se quiser (opcional) reservas.sort((a, b) => { if (a.data === b.data) return (a.horarioInicio || "").localeCompare(b.horarioInicio || ""); return (a.data || "").localeCompare(b.data || ""); }); reservas.forEach(r => { const row = document.createElement("tr"); row.innerHTML = <td>${r.titulo || ""}</td> <td>${r.organizador || ""}</td> <td>${r.data || ""}</td> <td>${r.horarioInicio || ""}</td> <td>${r.horarioFim || ""}</td> <td> <button class="action-btn delete-btn" onclick="excluir('${r.id}')">Excluir</button> </td> ; tableBody.appendChild(row); }); } /* ========================== AUXILIARES / UI ========================== */ function initTimeSelectors() { const start = document.getElementById("horaInicio"); const end = document.getElementById("horaFim"); if (!start || !end) return; // limpa (caso já tenha algo) start.innerHTML = ""; end.innerHTML = ""; for (let h = 8; h <= 18; h++) { const hr = h.toString().padStart(2, "0"); start.innerHTML += <option value="${hr}:00">${hr}:00</option>; start.innerHTML += <option value="${hr}:30">${hr}:30</option>; end.innerHTML += <option value="${hr}:00">${hr}:00</option>; end.innerHTML += <option value="${hr}:30">${hr}:30</option>; } } function showLogin() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); const ms = document.getElementById("mainSection"); const lb = document.getElementById("logoffBtn"); if (ls) ls.style.display = "block"; if (rs) rs.style.display = "none"; if (ms) ms.style.display = "none"; if (lb) lb.style.display = "none"; const status = document.getElementById("statusBar"); if (status) status.textContent = "Não autenticado"; } function showRegister() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); if (ls) ls.style.display = "none"; if (rs) rs.style.display = "block"; } async function showMain() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); const ms = document.getElementById("mainSection"); const lb = document.getElementById("logoffBtn"); if (ls) ls.style.display = "none"; if (rs) rs.style.display = "none"; if (ms) ms.style.display = "block"; if (lb) lb.style.display = "inline-block"; const status = document.getElementById("statusBar"); if (status) status.textContent = Logado: ${loggedUser || "anônimo"}; await renderTable(); } /* ========================== INICIALIZAÇÃO DA PÁGINA ========================== */ document.addEventListener("DOMContentLoaded", async () => { // prepara seletores de horário initTimeSelectors(); // mostra tela de login por padrão ou restaura sessão const saved = localStorage.getItem("usuarioLogado"); if (saved) { try { userObj = JSON.parse(saved); loggedUser = userObj.usuario; await showMain(); } catch { showLogin(); } } else { showLogin(); } // conecta botões do HTML (se existirem) const bookBtn = document.getElementById("bookBtn"); if (bookBtn) bookBtn.addEventListener("click", createReservation); const logoffBtn = document.getElementById("logoffBtn"); if (logoffBtn) logoffBtn.addEventListener("click", logoff); }); /* ========================== EXPÕE FUNÇÕES PARA O HTML ========================== */ // algumas funções são chamadas a partir de atributos onclick do HTML, // então precisamos deixá-las acessíveis via window window.login = login; window.register = register; window.showLogin = showLogin; window.showRegister = showRegister; window.logoff = logoff; window.createReservation = createReservation; window.excluir = excluir;// importa o db que você exportou no seu arquivo de config import { db } from "./srcfirebaseConfig.js"; // importa funções do Firestore via CDN (v9+ modular) import { collection, addDoc, getDocs, query, where, doc, deleteDoc } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-firestore.js"; // variáveis de sessão let loggedUser = null; let userObj = null; /* ========================== FUNÇÕES DE AUTENTICAÇÃO ========================== */ async function register() { const username = document.getElementById("regUsername").value.trim(); const password = document.getElementById("regPassword").value.trim(); const question = document.getElementById("regQuestion") ? document.getElementById("regQuestion").value.trim() : ""; const answer = document.getElementById("regAnswer") ? document.getElementById("regAnswer").value.trim() : ""; if (!username || !password) return alert("Preencha todos os campos!"); try { // checa existência de usuário const q = query(collection(db, "usuarios"), where("usuario", "==", username)); const snapshot = await getDocs(q); if (!snapshot.empty) return alert("Usuário já existe!"); // cria usuário (ATENÇÃO: senha em texto puro - só para teste) await addDoc(collection(db, "usuarios"), { usuario: username, senha: password, securityQuestion: question || null, securityAnswer: answer || null, tipoUsuario: "usuario", createdAt: new Date().toISOString() }); alert("Usuário registrado com sucesso! Faça login."); // limpa campos document.getElementById("regUsername").value = ""; document.getElementById("regPassword").value = ""; if (document.getElementById("regQuestion")) document.getElementById("regQuestion").value = ""; if (document.getElementById("regAnswer")) document.getElementById("regAnswer").value = ""; showLogin(); } catch (e) { console.error("Erro ao registrar:", e); alert("Erro ao registrar usuário. Veja o console para detalhes."); } } async function login() { const username = document.getElementById("loginUsername").value.trim(); const password = document.getElementById("loginPassword").value.trim(); if (!username || !password) return alert("Preencha usuário e senha!"); try { const q = query( collection(db, "usuarios"), where("usuario", "==", username), where("senha", "==", password) ); const snapshot = await getDocs(q); if (snapshot.empty) return alert("Usuário ou senha incorretos!"); // pega o primeiro resultado (assumindo username único) userObj = snapshot.docs[0].data(); loggedUser = userObj.usuario; // persiste sessão localmente localStorage.setItem("usuarioLogado", JSON.stringify(userObj)); alert("Login realizado com sucesso!"); showMain(); } catch (e) { console.error("Erro no login:", e); alert("Erro ao efetuar login. Veja o console."); } } function logoff() { loggedUser = null; userObj = null; localStorage.removeItem("usuarioLogado"); showLogin(); } /* ========================== AGENDAMENTOS (CRUD) ========================== */ async function loadReservations() { try { const snapshot = await getDocs(collection(db, "agendamentos")); return snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() })); } catch (e) { console.error("Erro ao carregar reservas:", e); return []; } } async function createReservation() { const titulo = document.getElementById("titulo").value.trim(); const data = document.getElementById("data").value; const inicio = document.getElementById("horaInicio").value; const fim = document.getElementById("horaFim").value; if (!titulo || !data || !inicio || !fim) return alert("Preencha todos os campos!"); try { await addDoc(collection(db, "agendamentos"), { titulo, data, horarioInicio: inicio, horarioFim: fim, organizador: loggedUser || "anônimo", createdAt: new Date().toISOString() }); // limpa inputs (opcional) document.getElementById("titulo").value = ""; document.getElementById("data").value = ""; document.getElementById("horaInicio").selectedIndex = 0; document.getElementById("horaFim").selectedIndex = 0; await renderTable(); } catch (e) { console.error("Erro ao criar agendamento:", e); alert("Erro ao criar agendamento. Veja o console."); } } async function excluir(id) { try { await deleteDoc(doc(db, "agendamentos", id)); await renderTable(); } catch (e) { console.error("Erro ao excluir agendamento:", e); alert("Erro ao excluir agendamento. Veja o console."); } } async function renderTable() { const tableBody = document.querySelector("#meetingTable tbody"); if (!tableBody) return; tableBody.innerHTML = ""; const reservas = await loadReservations(); // ordena por data/hora se quiser (opcional) reservas.sort((a, b) => { if (a.data === b.data) return (a.horarioInicio || "").localeCompare(b.horarioInicio || ""); return (a.data || "").localeCompare(b.data || ""); }); reservas.forEach(r => { const row = document.createElement("tr"); row.innerHTML = <td>${r.titulo || ""}</td> <td>${r.organizador || ""}</td> <td>${r.data || ""}</td> <td>${r.horarioInicio || ""}</td> <td>${r.horarioFim || ""}</td> <td> <button class="action-btn delete-btn" onclick="excluir('${r.id}')">Excluir</button> </td> ; tableBody.appendChild(row); }); } /* ========================== AUXILIARES / UI ========================== */ function initTimeSelectors() { const start = document.getElementById("horaInicio"); const end = document.getElementById("horaFim"); if (!start || !end) return; // limpa (caso já tenha algo) start.innerHTML = ""; end.innerHTML = ""; for (let h = 8; h <= 18; h++) { const hr = h.toString().padStart(2, "0"); start.innerHTML += <option value="${hr}:00">${hr}:00</option>; start.innerHTML += <option value="${hr}:30">${hr}:30</option>; end.innerHTML += <option value="${hr}:00">${hr}:00</option>; end.innerHTML += <option value="${hr}:30">${hr}:30</option>; } } function showLogin() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); const ms = document.getElementById("mainSection"); const lb = document.getElementById("logoffBtn"); if (ls) ls.style.display = "block"; if (rs) rs.style.display = "none"; if (ms) ms.style.display = "none"; if (lb) lb.style.display = "none"; const status = document.getElementById("statusBar"); if (status) status.textContent = "Não autenticado"; } function showRegister() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); if (ls) ls.style.display = "none"; if (rs) rs.style.display = "block"; } async function showMain() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); const ms = document.getElementById("mainSection"); const lb = document.getElementById("logoffBtn"); if (ls) ls.style.display = "none"; if (rs) rs.style.display = "none"; if (ms) ms.style.display = "block"; if (lb) lb.style.display = "inline-block"; const status = document.getElementById("statusBar"); if (status) status.textContent = Logado: ${loggedUser || "anônimo"}; await renderTable(); } /* ========================== INICIALIZAÇÃO DA PÁGINA ========================== */ document.addEventListener("DOMContentLoaded", async () => { // prepara seletores de horário initTimeSelectors(); // mostra tela de login por padrão ou restaura sessão const saved = localStorage.getItem("usuarioLogado"); if (saved) { try { userObj = JSON.parse(saved); loggedUser = userObj.usuario; await showMain(); } catch { showLogin(); } } else { showLogin(); } // conecta botões do HTML (se existirem) const bookBtn = document.getElementById("bookBtn"); if (bookBtn) bookBtn.addEventListener("click", createReservation); const logoffBtn = document.getElementById("logoffBtn"); if (logoffBtn) logoffBtn.addEventListener("click", logoff); }); /* ========================== EXPÕE FUNÇÕES PARA O HTML ========================== */ // algumas funções são chamadas a partir de atributos onclick do HTML, // então precisamos deixá-las acessíveis via window window.login = login; window.register = register; window.showLogin = showLogin; window.showRegister = showRegister; window.logoff = logoff; window.createReservation = createReservation; window.excluir = excluir// importa o db que você exportou no seu arquivo de config import { db } from "./srcfirebaseConfig.js"; // importa funções do Firestore via CDN (v9+ modular) import { collection, addDoc, getDocs, query, where, doc, deleteDoc } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-firestore.js"; // variáveis de sessão let loggedUser = null; let userObj = null; /* ========================== FUNÇÕES DE AUTENTICAÇÃO ========================== */ async function register() { const username = document.getElementById("regUsername").value.trim(); const password = document.getElementById("regPassword").value.trim(); const question = document.getElementById("regQuestion") ? document.getElementById("regQuestion").value.trim() : ""; const answer = document.getElementById("regAnswer") ? document.getElementById("regAnswer").value.trim() : ""; if (!username || !password) return alert("Preencha todos os campos!"); try { // checa existência de usuário const q = query(collection(db, "usuarios"), where("usuario", "==", username)); const snapshot = await getDocs(q); if (!snapshot.empty) return alert("Usuário já existe!"); // cria usuário (ATENÇÃO: senha em texto puro - só para teste) await addDoc(collection(db, "usuarios"), { usuario: username, senha: password, securityQuestion: question || null, securityAnswer: answer || null, tipoUsuario: "usuario", createdAt: new Date().toISOString() }); alert("Usuário registrado com sucesso! Faça login."); // limpa campos document.getElementById("regUsername").value = ""; document.getElementById("regPassword").value = ""; if (document.getElementById("regQuestion")) document.getElementById("regQuestion").value = ""; if (document.getElementById("regAnswer")) document.getElementById("regAnswer").value = ""; showLogin(); } catch (e) { console.error("Erro ao registrar:", e); alert("Erro ao registrar usuário. Veja o console para detalhes."); } } async function login() { const username = document.getElementById("loginUsername").value.trim(); const password = document.getElementById("loginPassword").value.trim(); if (!username || !password) return alert("Preencha usuário e senha!"); try { const q = query( collection(db, "usuarios"), where("usuario", "==", username), where("senha", "==", password) ); const snapshot = await getDocs(q); if (snapshot.empty) return alert("Usuário ou senha incorretos!"); // pega o primeiro resultado (assumindo username único) userObj = snapshot.docs[0].data(); loggedUser = userObj.usuario; // persiste sessão localmente localStorage.setItem("usuarioLogado", JSON.stringify(userObj)); alert("Login realizado com sucesso!"); showMain(); } catch (e) { console.error("Erro no login:", e); alert("Erro ao efetuar login. Veja o console."); } } function logoff() { loggedUser = null; userObj = null; localStorage.removeItem("usuarioLogado"); showLogin(); } /* ========================== AGENDAMENTOS (CRUD) ========================== */ async function loadReservations() { try { const snapshot = await getDocs(collection(db, "agendamentos")); return snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() })); } catch (e) { console.error("Erro ao carregar reservas:", e); return []; } } async function createReservation() { const titulo = document.getElementById("titulo").value.trim(); const data = document.getElementById("data").value; const inicio = document.getElementById("horaInicio").value; const fim = document.getElementById("horaFim").value; if (!titulo || !data || !inicio || !fim) return alert("Preencha todos os campos!"); try { await addDoc(collection(db, "agendamentos"), { titulo, data, horarioInicio: inicio, horarioFim: fim, organizador: loggedUser || "anônimo", createdAt: new Date().toISOString() }); // limpa inputs (opcional) document.getElementById("titulo").value = ""; document.getElementById("data").value = ""; document.getElementById("horaInicio").selectedIndex = 0; document.getElementById("horaFim").selectedIndex = 0; await renderTable(); } catch (e) { console.error("Erro ao criar agendamento:", e); alert("Erro ao criar agendamento. Veja o console."); } } async function excluir(id) { try { await deleteDoc(doc(db, "agendamentos", id)); await renderTable(); } catch (e) { console.error("Erro ao excluir agendamento:", e); alert("Erro ao excluir agendamento. Veja o console."); } } async function renderTable() { const tableBody = document.querySelector("#meetingTable tbody"); if (!tableBody) return; tableBody.innerHTML = ""; const reservas = await loadReservations(); // ordena por data/hora se quiser (opcional) reservas.sort((a, b) => { if (a.data === b.data) return (a.horarioInicio || "").localeCompare(b.horarioInicio || ""); return (a.data || "").localeCompare(b.data || ""); }); reservas.forEach(r => { const row = document.createElement("tr"); row.innerHTML = <td>${r.titulo || ""}</td> <td>${r.organizador || ""}</td> <td>${r.data || ""}</td> <td>${r.horarioInicio || ""}</td> <td>${r.horarioFim || ""}</td> <td> <button class="action-btn delete-btn" onclick="excluir('${r.id}')">Excluir</button> </td> ; tableBody.appendChild(row); }); } /* ========================== AUXILIARES / UI ========================== */ function initTimeSelectors() { const start = document.getElementById("horaInicio"); const end = document.getElementById("horaFim"); if (!start || !end) return; // limpa (caso já tenha algo) start.innerHTML = ""; end.innerHTML = ""; for (let h = 8; h <= 18; h++) { const hr = h.toString().padStart(2, "0"); start.innerHTML += <option value="${hr}:00">${hr}:00</option>; start.innerHTML += <option value="${hr}:30">${hr}:30</option>; end.innerHTML += <option value="${hr}:00">${hr}:00</option>; end.innerHTML += <option value="${hr}:30">${hr}:30</option>; } } function showLogin() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); const ms = document.getElementById("mainSection"); const lb = document.getElementById("logoffBtn"); if (ls) ls.style.display = "block"; if (rs) rs.style.display = "none"; if (ms) ms.style.display = "none"; if (lb) lb.style.display = "none"; const status = document.getElementById("statusBar"); if (status) status.textContent = "Não autenticado"; } function showRegister() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); if (ls) ls.style.display = "none"; if (rs) rs.style.display = "block"; } async function showMain() { const ls = document.getElementById("loginSection"); const rs = document.getElementById("registerSection"); const ms = document.getElementById("mainSection"); const lb = document.getElementById("logoffBtn"); if (ls) ls.style.display = "none"; if (rs) rs.style.display = "none"; if (ms) ms.style.display = "block"; if (lb) lb.style.display = "inline-block"; const status = document.getElementById("statusBar"); if (status) status.textContent = Logado: ${loggedUser || "anônimo"}; await renderTable(); } /* ========================== INICIALIZAÇÃO DA PÁGINA ========================== */ document.addEventListener("DOMContentLoaded", async () => { // prepara seletores de horário initTimeSelectors(); // mostra tela de login por padrão ou restaura sessão const saved = localStorage.getItem("usuarioLogado"); if (saved) { try { userObj = JSON.parse(saved); loggedUser = userObj.usuario; await showMain(); } catch { showLogin(); } } else { showLogin(); } // conecta botões do HTML (se existirem) const bookBtn = document.getElementById("bookBtn"); if (bookBtn) bookBtn.addEventListener("click", createReservation); const logoffBtn = document.getElementById("logoffBtn"); if (logoffBtn) logoffBtn.addEventListener("click", logoff); }); /* ========================== EXPÕE FUNÇÕES PARA O HTML ========================== */ // algumas funções são chamadas a partir de atributos onclick do HTML, // então precisamos deixá-las acessíveis via window window.login = login; window.register = register; window.showLogin = showLogin; window.showRegister = showRegister; window.logoff = logoff; window.createReservation = createReservation; window.excluir = excluir;// importa o db que você exportou no seu arquivo de config
import { db } from "./src/firebaseConfig.js";

// importa funções do Firestore via CDN (v12 modular)
import {
  collection,
  addDoc,
  getDocs,
  query,
  where,
  doc,
  deleteDoc
} from "https://www.gstatic.com/firebasejs/12.4.0/firebase-firestore.js";

// variáveis de sessão
let loggedUser = null;
let userObj = null;

/* ==========================
   FUNÇÕES DE AUTENTICAÇÃO
========================== */

async function register() {
  const username = document.getElementById("regUsername").value.trim();
  const password = document.getElementById("regPassword").value.trim();
  const question = document.getElementById("regQuestion") ? document.getElementById("regQuestion").value.trim() : "";
  const answer = document.getElementById("regAnswer") ? document.getElementById("regAnswer").value.trim() : "";

  if (!username || !password) return alert("Preencha todos os campos!");

  try {
    const q = query(collection(db, "usuarios"), where("usuario", "==", username));
    const snapshot = await getDocs(q);

    if (!snapshot.empty) return alert("Usuário já existe!");

    await addDoc(collection(db, "usuarios"), {
      usuario: username,
      senha: password,
      securityQuestion: question || null,
      securityAnswer: answer || null,
      tipoUsuario: "usuario",
      createdAt: new Date().toISOString()
    });

    alert("Usuário registrado com sucesso! Faça login.");
    document.getElementById("regUsername").value = "";
    document.getElementById("regPassword").value = "";
    if (document.getElementById("regQuestion")) document.getElementById("regQuestion").value = "";
    if (document.getElementById("regAnswer")) document.getElementById("regAnswer").value = "";
    showLogin();
  } catch (e) {
    console.error("Erro ao registrar:", e);
    alert("Erro ao registrar usuário. Veja o console para detalhes.");
  }
}

async function login() {
  const username = document.getElementById("loginUsername").value.trim();
  const password = document.getElementById("loginPassword").value.trim();

  if (!username || !password) return alert("Preencha usuário e senha!");

  try {
    const q = query(
      collection(db, "usuarios"),
      where("usuario", "==", username),
      where("senha", "==", password)
    );
    const snapshot = await getDocs(q);

    if (snapshot.empty) return alert("Usuário ou senha incorretos!");

    userObj = snapshot.docs[0].data();
    loggedUser = userObj.usuario;

    localStorage.setItem("usuarioLogado", JSON.stringify(userObj));

    alert("Login realizado com sucesso!");
    showMain();
  } catch (e) {
    console.error("Erro no login:", e);
    alert("Erro ao efetuar login. Veja o console.");
  }
}

function logoff() {
  loggedUser = null;
  userObj = null;
  localStorage.removeItem("usuarioLogado");
  showLogin();
}

/* ==========================
   AGENDAMENTOS (CRUD)
========================== */

async function loadReservations() {
  try {
    const snapshot = await getDocs(collection(db, "agendamentos"));
    return snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() }));
  } catch (e) {
    console.error("Erro ao carregar reservas:", e);
    return [];
  }
}

async function createReservation() {
  const titulo = document.getElementById("titulo").value.trim();
  const data = document.getElementById("data").value;
  const inicio = document.getElementById("horaInicio").value;
  const fim = document.getElementById("horaFim").value;

  if (!titulo || !data || !inicio || !fim) return alert("Preencha todos os campos!");

  try {
    await addDoc(collection(db, "agendamentos"), {
      titulo,
      data,
      horarioInicio: inicio,
      horarioFim: fim,
      organizador: loggedUser || "anônimo",
      createdAt: new Date().toISOString()
    });

    document.getElementById("titulo").value = "";
    document.getElementById("data").value = "";
    document.getElementById("horaInicio").selectedIndex = 0;
    document.getElementById("horaFim").selectedIndex = 0;

    await renderTable();
  } catch (e) {
    console.error("Erro ao criar agendamento:", e);
    alert("Erro ao criar agendamento. Veja o console.");
  }
}

async function excluir(id) {
  try {
    await deleteDoc(doc(db, "agendamentos", id));
    await renderTable();
  } catch (e) {
    console.error("Erro ao excluir agendamento:", e);
    alert("Erro ao excluir agendamento. Veja o console.");
  }
}

async function renderTable() {
  const tableBody = document.querySelector("#meetingTable tbody");
  if (!tableBody) return;

  tableBody.innerHTML = "";
  const reservas = await loadReservations();

  reservas.sort((a, b) => {
    if (a.data === b.data) return (a.horarioInicio || "").localeCompare(b.horarioInicio || "");
    return (a.data || "").localeCompare(b.data || "");
  });

  reservas.forEach(r => {
    const row = document.createElement("tr");
    row.innerHTML = `
      <td>${r.titulo || ""}</td>
      <td>${r.organizador || ""}</td>
      <td>${r.data || ""}</td>
      <td>${r.horarioInicio || ""}</td>
      <td>${r.horarioFim || ""}</td>
      <td><button class="action-btn delete-btn" onclick="excluir('${r.id}')">Excluir</button></td>
    `;
    tableBody.appendChild(row);
  });
}

/* ==========================
   AUXILIARES / UI
========================== */

function initTimeSelectors() {
  const start = document.getElementById("horaInicio");
  const end = document.getElementById("horaFim");
  if (!start || !end) return;

  start.innerHTML = "";
  end.innerHTML = "";

  for (let h = 8; h <= 18; h++) {
    const hr = h.toString().padStart(2, "0");
    start.innerHTML += `<option value="${hr}:00">${hr}:00</option>`;
    start.innerHTML += `<option value="${hr}:30">${hr}:30</option>`;
    end.innerHTML += `<option value="${hr}:00">${hr}:00</option>`;
    end.innerHTML += `<option value="${hr}:30">${hr}:30</option>`;
  }
}

function showLogin() {
  const ls = document.getElementById("loginSection");
  const rs = document.getElementById("registerSection");
  const ms = document.getElementById("mainSection");
  const lb = document.getElementById("logoffBtn");

  if (ls) ls.style.display = "block";
  if (rs) rs.style.display = "none";
  if (ms) ms.style.display = "none";
  if (lb) lb.style.display = "none";

  const status = document.getElementById("statusBar");
  if (status) status.textContent = "Não autenticado";
}

function showRegister() {
  const ls = document.getElementById("loginSection");
  const rs = document.getElementById("registerSection");
  if (ls) ls.style.display = "none";
  if (rs) rs.style.display = "block";
}

async function showMain() {
  const ls = document.getElementById("loginSection");
  const rs = document.getElementById("registerSection");
  const ms = document.getElementById("mainSection");
  const lb = document.getElementById("logoffBtn");

  if (ls) ls.style.display = "none";
  if (rs) rs.style.display = "none";
  if (ms) ms.style.display = "block";
  if (lb) lb.style.display = "inline-block";

  const status = document.getElementById("statusBar");
  if (status) status.textContent = `Logado: ${loggedUser || "anônimo"}`;

  await renderTable();
}

/* ==========================
   INICIALIZAÇÃO
========================== */

document.addEventListener("DOMContentLoaded", async () => {
  initTimeSelectors();

  const saved = localStorage.getItem("usuarioLogado");
  if (saved) {
    try {
      userObj = JSON.parse(saved);
      loggedUser = userObj.usuario;
      await showMain();
    } catch {
      showLogin();
    }
  } else {
    showLogin();
  }

  const bookBtn = document.getElementById("bookBtn");
  if (bookBtn) bookBtn.addEventListener("click", createReservation);

  const logoffBtn = document.getElementById("logoffBtn");
  if (logoffBtn) logoffBtn.addEventListener("click", logoff);
});

/* ==========================
   EXPORTA FUNÇÕES P/ HTML
========================== */

window.login = login;
window.register = register;
window.showLogin = showLogin;
window.showRegister = showRegister;
window.logoff = logoff;
window.createReservation = createReservation;
window.excluir = excluir;
